---
# Copyright (c) IBM Corporation 2021
# tasks file for oracle_install
- name: Run initialization tasks
  ansible.builtin.include_tasks: ../../dataguard_precheck/tasks/init.yml
  when: not init_done is defined

- name: Checking if Dataguard setup was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/dataguard.success"
  register: dataguarddone
  when: inventory_hostname == standby_host

- name: Exit if Dataguard setup was already done
  ansible.builtin.fail:
    msg: "Dataguard setup already done. Exiting."
  when: inventory_hostname == standby_host and dataguarddone.stat.exists 
  run_once: true

- name: End play if Dataguard setup Task was done
  ansible.builtin.meta: end_play
  when: inventory_hostname == standby_host and dataguarddone.stat.exists
  run_once: true

- name: Checking if Dataguard restore was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/standby_restore.success"
  register: restoredone
  when: inventory_hostname == standby_host

- name: Copy DBID from primary database
  ansible.builtin.template:
    src: primary_dbid.sh
    dest: "{{ scripts_dir }}/primary_dbid.sh"
    mode: '0755'
  when: 
      - inventory_hostname == primary_host 
      - restoredone is not defined or (restoredone.stat.exists is not defined or not restoredone.stat.exists)  

- name: Fetch DBID from primary database
  ansible.builtin.shell: "{{ scripts_dir }}/primary_dbid.sh"
  register: dbid_result
  changed_when: false
  when: 
      - inventory_hostname == primary_host 
      - restoredone is not defined or (restoredone.stat.exists is not defined or not restoredone.stat.exists)  

- name: Set DBID as fact on primary database
  ansible.builtin.set_fact:
    standby_dbid: "{{ dbid_result.stdout | trim }}"
  when: 
      - inventory_hostname == primary_host 
      - restoredone is not defined or (restoredone.stat.exists is not defined or not restoredone.stat.exists)  

- name: Fetch DBID fact from primary to standby
  ansible.builtin.set_fact:
    standby_dbid: "{{ hostvars[primary_host].standby_dbid }}"
  when: 
      - inventory_hostname == standby_host and hostvars[primary_host].standby_dbid is defined
      - restoredone is not defined or (restoredone.stat.exists is not defined or not restoredone.stat.exists)  

- name: Copy RMAN restore script for standby
  ansible.builtin.template:
    src: restore_standby_db.sh.j2
    dest: "{{ scripts_dir }}/restore_standby_db.sh"
    mode: '0755'
  vars:
    database_name: "standby"
    dbid: "{{ standby_dbid }}"
  when: 
      - inventory_hostname == standby_host 
      - not restoredone.stat.exists

- name: Execute restore script for standby
  ansible.builtin.shell: "{{ scripts_dir }}/restore_standby_db.sh"
  register: precheck_output
  failed_when: precheck_output.rc != 0
  changed_when: false
  when: 
      - inventory_hostname == standby_host 
      - not restoredone.stat.exists

- name: Debug Pre-config Output for standby dataabse
  ansible.builtin.debug:
    msg: "{{ precheck_output.stdout_lines }}"
  when: 
      - inventory_hostname == standby_host 
      - not restoredone.stat.exists

- name: Checking if Dataguard restore was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/standby_restore.success"
  register: restoredone
  when: inventory_hostname == standby_host

- name: Copy RMAN Restore Post-Processing Script
  ansible.builtin.template:
    src: restore_postprocess.sh
    dest: "{{ scripts_dir }}/restore_postprocess.sh"
    mode: '0755'
  when:
       - inventory_hostname == standby_host 
       - restoredone.stat.exists

- name: Run RMAN Restore Post-Processing Script
  ansible.builtin.shell: "{{ scripts_dir }}/restore_postprocess.sh"
  register: script_output
  changed_when: false
  when:
       - inventory_hostname == standby_host 
       - restoredone.stat.exists

- name: Display RMAN Restore Post-Processing Script Output
  ansible.builtin.debug:
    msg: "{{ script_output.stdout_lines }}"
  when:
       - inventory_hostname == standby_host 
       - restoredone.stat.exists









