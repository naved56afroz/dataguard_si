#!/bin/bash

export ORACLE_SID=$(ps -ef | grep pmon | grep ASM | awk '{match($NF, /\+ASM[0-9]*/); print substr($NF, RSTART, RLENGTH)}')
export ORACLE_HOME=$(awk -F: -v sid="$ORACLE_SID" '$1 == sid {print $2}' /etc/oratab)
export PATH=$PATH:$ORACLE_HOME/bin
MASTER_LOG="{{ done_dir }}/standby_rman_restore.log"
FAILURE_LOG="{{ done_dir }}/standby_rman_restore_fail.log"

# Ensure log files are empty before running
> "$MASTER_LOG"
> "$FAILURE_LOG"

if [[ -z "$ORACLE_HOME" ]]; then
  echo "ERROR: ORACLE_HOME is not set for ASM. Check /etc/oratab and update accordingly" | tee -a "$FAILURE_LOG"
  exit 1
fi

# Fetch the disk group name from standby ASM
su - {{ grid_user }} -c "sqlplus -s / as sysdba" <<SQL | tee "$MASTER_LOG"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 1000
SET TRIMOUT ON
SET TRIMSPOOL ON

-- Fetch ASM disk group
SELECT 'DISKGROUP:' || NAME FROM v\$asm_diskgroup WHERE STATE='MOUNTED';

SQL

DISKGROUP=$(grep "DISKGROUP:" "$MASTER_LOG" | awk -F ':' '{print $2}')

# Check if disk group was retrieved
if [[ -z "$DISKGROUP" || "$DISKGROUP" == "DISKGROUP:" ]]; then
  echo "ERROR:Failed to fetch disk group from standby ASM, verify manually and retry" | tee -a "$FAILURE_LOG"
  exit 1
fi

# Define values dynamically
diskgroup="+${DISKGROUP}"
export ORACLE_SID={{ databases[database_name].oracle_db_sid }}
export ORACLE_HOME={{ databases[database_name].oracle_db_home }}
export PATH={{ databases[database_name].oracle_db_home }}/bin:$PATH

# Check if the standby database is already started
db_status=$(su - {{ db_oracle_user }} -c "sqlplus -s / as sysdba" <<SQL
SET HEAD OFF;
SET FEEDBACK OFF;
SELECT status FROM v\$instance;
EXIT;
SQL
)

# Trim any whitespace from output
db_status=$(echo "$db_status" | tr -d '[:space:]')

# Start standby DB

# Trim any whitespace from output
db_status=$(echo "$db_status" | tr -d '[:space:]')

if [ "$db_status" != "STARTED" ] || [ "$db_status" != "MOUNTED" ] || [ "$db_status" != "OPEN" ] || [ "$db_status" != "OPENMIGRATE" ]; then
    echo "Standby database is already running with status: $db_status" | tee -a "$MASTER_LOG"
    else
    echo "Starting standby database..." | tee -a "$MASTER_LOG"
    su - {{ db_oracle_user }} -c "sqlplus -s / as sysdba" <<SQL | tee -a "$MASTER_LOG"
    startup nomount;
SQL
fi

# Convert 'with_backup' variable to lowercase for consistency
WITH_BACKUP="$(echo {{ with_backup | default('no') }} | tr '[:upper:]' '[:lower:]')"
if [[ "$WITH_BACKUP" == "true" ]]; then

 {% set backup_format = backup_location ~ '/%U' %}
 {% set ctrl_backup_format = backup_location ~ '/controlfile_%d_%T_%s_%p.bkp' %}
 {% set controlfile_tag = "CONTROLFILE_BACKUP" %}
 {% set fullbackup_tag = "FULL_ARC_BACKUP" %}
 
 # Get the latest control file backup
 LATEST_CONTROLFILE=$(ls -t {{ backup_location }}/controlfile_*.bkp  | head -1)
 
 # Check if a control file backup exists
   if [[ -z "$LATEST_CONTROLFILE" ]]; then
       echo "ERROR: No control file backup found!"
       exit 1
   fi
 
 echo "Using latest control file backup: $LATEST_CONTROLFILE"
 
 su - {{ db_oracle_user }} -c "rman target /" <<EOF | tee "$MASTER_LOG"
 RUN {
     ALLOCATE CHANNEL ch1 DEVICE TYPE DISK;
     ALLOCATE CHANNEL ch2 DEVICE TYPE DISK;
     ALLOCATE CHANNEL ch3 DEVICE TYPE DISK;
     ALLOCATE CHANNEL ch4 DEVICE TYPE DISK;
     
     set dbid {{ dbid }};
     
     # Identify the latest control file backup dynamically
     restore standby controlfile from '$LATEST_CONTROLFILE';
     sql "alter database mount standby database";
     
     # Catalog the backup pieces if needed
     catalog start with '{{ backup_location }}/' noprompt;
     
     # Restore database
     set newname for database to '${diskgroup}';
     restore database;
     switch datafile all;
     recover database;
 
     RELEASE CHANNEL ch1;
     RELEASE CHANNEL ch2;
     RELEASE CHANNEL ch3;
     RELEASE CHANNEL ch4;
 }
 EXIT;
EOF

elif [[ "$WITH_BACKUP" == "false" ]]; then

 # Define values dynamically
 ORACLE_HOME={{ databases.standby.oracle_db_home }}
 ORACLE_SID={{ databases.standby.oracle_db_sid }}
 standby_diskgroup="+${DISKGROUP}"
 primary_diskgroup={{ primary_diskgroup }}
 PRIMARY_UNIQUE_NAME="{{ databases.primary.oracle_db_unique_name }}"
 PRIMARY_DB_NAME="{{ databases.primary.oracle_db_name }}"
 STANDBY_UNIQUE_NAME="{{ databases.standby.oracle_db_unique_name }}"
 log_file_name_convert="'${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'"
 db_file_name_convert="'${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'"
 db_recovery_file_dest="{{ databases.standby.db_recovery_file_dest }}"
 db_recovery_file_dest_size="{{ databases.standby.db_recovery_file_dest_size }}"
 
 su - {{ db_oracle_user }} -c "rman target sys/{{ default_dbpass }}@{{ databases.primary.oracle_db_sid }} auxiliary sys/{{ default_dbpass }}@${ORACLE_SID}" <<EOF | tee "$MASTER_LOG"
 RUN {
      ALLOCATE CHANNEL prmy1 TYPE DISK;
      ALLOCATE CHANNEL prmy2 TYPE DISK;
      ALLOCATE CHANNEL prmy3 TYPE DISK;
      ALLOCATE CHANNEL prmy4 TYPE DISK;
      ALLOCATE auxiliary CHANNEL stby TYPE DISK;
      
      duplicate target database for standby from active database NOFILENAMECHECK
      spfile
        parameter_value_convert '${PRIMARY_UNIQUE_NAME}','${STANDBY_UNIQUE_NAME}'
        set db_name='${PRIMARY_UNIQUE_NAME}'
        set db_create_file_dest='${standby_diskgroup}'
        set db_unique_name='${STANDBY_UNIQUE_NAME}'
        set db_file_name_convert='${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'
        set log_file_name_convert='${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'
        set control_files='${standby_diskgroup}/${STANDBY_UNIQUE_NAME}/CONTROLFILE/${STANDBY_UNIQUE_NAME}_control01.ctl'
        set log_archive_max_processes='5'
        set fal_client='${STANDBY_UNIQUE_NAME}'
        set fal_server='${PRIMARY_UNIQUE_NAME}'
        set standby_file_management='MANUAL'
        set log_archive_config='dg_config=(${PRIMARY_UNIQUE_NAME},${STANDBY_UNIQUE_NAME})'
        set log_archive_dest_2='service=${PRIMARY_UNIQUE_NAME} ASYNC valid_for=(ONLINE_LOGFILE,PRIMARY_ROLE) db_unique_name=${PRIMARY_UNIQUE_NAME}'
        set db_recovery_file_dest='${db_recovery_file_dest}'
        set db_recovery_file_dest_size='${db_recovery_file_dest_size}'
 ;
 }
EXIT;
EOF

else
    echo "ERROR: Invalid value for 'with_backup'. Please provide 'true' or 'false'." | tee -a "$FAILURE_LOG"
    exit 1
fi

# Capture RMAN exit status
rman_exit_code=$?

# Check if the RMAN command was successful and ensure there are no RMAN- errors in the log
if [ $rman_exit_code -eq 0 ] && ! grep -q "RMAN-" "$MASTER_LOG"; then
    echo "Dataguard setup completed successfully." | tee -a $MASTER_LOG
    touch "{{ done_dir }}/standby_restore.success"
else
    echo "Dataguard setup failed! Check logs for details: $MASTER_LOG" | tee -a "$FAILURE_LOG"
    exit 1
fi

#Check for failures and exit accordingly
if [[ -s "$FAILURE_LOG" ]]; then
    cat "$FAILURE_LOG"
    rm -f "$FAILURE_LOG"
    exit 1
fi

echo "Dataguard setup completed successfully!"
rm -f "$FAILURE_LOG"
exit 0
