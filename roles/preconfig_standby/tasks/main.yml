---
# Copyright (c) IBM Corporation 2021
# tasks file for oracle_install
- name: Run initialization tasks
  ansible.builtin.include_tasks: ../../dataguard_precheck/tasks/init.yml
  when: not init_done is defined

- name: Checking if Dataguard setup was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/dataguard.success"
  register: dataguarddone
  delegate_to: "{{ standby_host }}"
  run_once: true

- name: Set fact if Dataguard setup was done
  ansible.builtin.set_fact:
    dataguard_setup_done: "{{ dataguarddone.stat.exists | default(false) }}"
  run_once: true

- name: Exit if Dataguard setup was already done
  ansible.builtin.fail:
    msg: "Dataguard setup already done. Exiting."
  when: dataguard_setup_done
  run_once: true

- name: End play if Dataguard setup Task was done
  ansible.builtin.meta: end_play
  when: dataguard_setup_done
  run_once: true

- name: Copy DISKGROUP script from primary database
  ansible.builtin.template:
    src: diskgroup.sh
    dest: "{{ scripts_dir }}/diskgroup.sh"
    mode: '0755'
  when: 
      - inventory_hostname == primary_host 
      
- name: Fetch DISKGROUP from primary database
  ansible.builtin.shell: "{{ scripts_dir }}/diskgroup.sh"
  register: diskgroup_result
  changed_when: false
  when: 
      - inventory_hostname == primary_host 
     
- name: Set DISKGROUP as fact on primary database
  ansible.builtin.set_fact:
    standby_diskgroup: "{{ diskgroup_result.stdout | trim }}"
  when: 
      - inventory_hostname == primary_host  

- name: Fetch DISKGROUP fact from primary to standby
  ansible.builtin.set_fact:
    standby_diskgroup: "{{ hostvars[primary_host].standby_diskgroup }}"
  when: 
      - inventory_hostname == standby_host and hostvars[primary_host].standby_diskgroup is defined

- name: Checking if Standby pre configure was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/standby_preconfig.success"
  register: standbypreconfigdone
  when: inventory_hostname == standby_host

- name: Create Audit Directory
  ansible.builtin.file:
    path: "{{ databases.standby.oracle_db_base }}/admin/{{ databases.standby.oracle_db_unique_name }}/adump"
    state: directory
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    mode: '0755'
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists

- name: Copy password file to $ORACLE_HOME/dbs
  ansible.builtin.copy:
    src: "{{ scripts_dir }}/orapw{{ databases.standby.oracle_db_sid }}"  # Update with actual file name
    dest: "{{ databases.standby.oracle_db_home }}/dbs"
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    remote_src: yes
    mode: '0640'
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists

- name: Copy tnsnames.ora to $ORACLE_HOME/network/admin
  ansible.builtin.copy:
    src: "{{ scripts_dir }}/tnsnames.ora"  # Update with actual file name
    dest: "{{ databases.standby.oracle_db_home }}/network/admin"
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    remote_src: yes
    mode: '0640'
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists

- name: Copy standby pfile
  ansible.builtin.copy:
    src: "{{ scripts_dir }}/standby.pfile"  # Update with actual file name
    dest: "{{ databases.standby.oracle_db_home }}/dbs"
    owner: "{{ db_oracle_user }}"
    group: "{{ db_oinstall_group }}"
    remote_src: yes
    mode: '0644'
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists

- name: Copy Dataguard Pre-config script for standby
  ansible.builtin.template:
    src: standby_preconfig.sh.j2
    dest: "{{ scripts_dir }}/standby_preconfig.sh"
    mode: '0755'
  vars:
    database_name: "standby"
    primary_diskgroup: "{{ standby_diskgroup }}"
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists
  
- name: Execute Dataguard Pre-config script on standby
  ansible.builtin.shell: "{{ scripts_dir }}/standby_preconfig.sh"
  register: precheck_output
  failed_when: precheck_output.rc != 0
  changed_when: false
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists

- name: Debug Pre-config Output for standby database
  ansible.builtin.debug:
    msg: "{{ precheck_output.stdout_lines }}"
  when: 
      - inventory_hostname == standby_host 
      - not standbypreconfigdone.stat.exists









