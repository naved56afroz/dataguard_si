#!/bin/bash

export ORACLE_SID=$(ps -ef | grep pmon | grep ASM | awk '{match($NF, /\+ASM[0-9]*/); print substr($NF, RSTART, RLENGTH)}')
export ORACLE_HOME=$(awk -F: -v sid="$ORACLE_SID" '$1 == sid {print $2}' /etc/oratab)
export PATH=$PATH:$ORACLE_HOME/bin
MASTER_LOG="{{ done_dir }}/standby_preconfig.log"
FAILURE_LOG="{{ done_dir }}/standby_preconfig_failure.log"

# Ensure log files are empty before running
> "$MASTER_LOG"
> "$FAILURE_LOG"

if [[ -z "$ORACLE_HOME" ]]; then
  echo "ERROR: ORACLE_HOME is not set for ASM. Check /etc/oratab and update accordingly" | tee -a "$FAILURE_LOG"
  exit 1
fi

if su - grid -c "$ORACLE_HOME/bin/lsnrctl status" 2>&1 | grep -q "TNS-12541"; then
  echo "ERROR: Listener is down. Start the listener and retry." | tee -a "$FAILURE_LOG"
  exit 1
fi

# Fetch port and listener.ora file location
PORT=$(su - grid -c "$ORACLE_HOME/bin/lsnrctl status | grep PORT | awk -F'PORT=' '{print \$2}' | awk -F')' '{print \$1}' | sort -u | head -1")
listener_file=$(su - grid -c "$ORACLE_HOME/bin/lsnrctl status | grep \"Listener Parameter File\" | awk '{print \$NF}'")

# Fetch the disk group name from standby ASM
su - {{ grid_user }} -c "sqlplus -s / as sysdba" <<SQL | tee "$MASTER_LOG"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 1000
SET TRIMOUT ON
SET TRIMSPOOL ON

-- Fetch ASM disk group
SELECT 'DISKGROUP:' || NAME FROM v\$asm_diskgroup WHERE STATE='MOUNTED';

SQL

DISKGROUP=$(grep "DISKGROUP:" "$MASTER_LOG" | awk -F ':' '{print $2}')

# Check if disk group was retrieved
if [[ -z "$DISKGROUP" || "$DISKGROUP" == "DISKGROUP:" ]]; then
  echo "ERROR:Failed to fetch disk group from standby ASM, verify manually and retry" | tee -a "$FAILURE_LOG"
  exit 1
fi

# Define values dynamically
ORACLE_HOME={{ databases.standby.oracle_db_home }}
ORACLE_SID={{ databases.standby.oracle_db_sid }}
PFILE=${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora
oracle_db_base="{{ databases.standby.oracle_db_base }}"
standby_diskgroup="+${DISKGROUP}"
primary_diskgroup={{ primary_diskgroup }}
PRIMARY_UNIQUE_NAME="{{ databases.primary.oracle_db_unique_name }}"
PRIMARY_DB_NAME="{{ databases.primary.oracle_db_name }}"
STANDBY_UNIQUE_NAME="{{ databases.standby.oracle_db_unique_name }}"
db_recovery_file_dest="{{ databases.standby.db_recovery_file_dest }}"
db_recovery_file_dest_size="{{ databases.standby.db_recovery_file_dest_size }}"

log_archive_dest_1="'LOCATION=USE_DB_RECOVERY_FILE_DEST'"
log_archive_config="'DG_CONFIG=(${STANDBY_UNIQUE_NAME},${PRIMARY_UNIQUE_NAME})'"
control_files="'${standby_diskgroup}'"
log_file_name_convert="'${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'"
db_file_name_convert="'${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'"
audit_file_dest="'${oracle_db_base}/admin/${STANDBY_UNIQUE_NAME}/adump'"
local_listener="'(ADDRESS=(PROTOCOL=TCP)(HOST={{ standby_host }})(PORT=${PORT}))'"

# Convert 'with_backup' variable to lowercase for consistency
WITH_BACKUP="$(echo {{ with_backup | default('no') }} | tr '[:upper:]' '[:lower:]')"

if [[ "$WITH_BACKUP" == "true" ]]; then 

  # Take a backup before modifying
  cp ${ORACLE_HOME}/dbs/standby.pfile "$PFILE"
  TMP_FILE="${PFILE}.tmp"

  # Remove all matching parameters in one go and create a temp file
  awk 'tolower($0) !~ /(db_unique_name|audit_file_dest|log_archive_dest_1|control_files|log_file_name_convert|db_file_name_convert|db_create_file_dest)/' "$PFILE" > "$TMP_FILE"

  # Append updated parameters at the end
  cat <<EOF >> "$TMP_FILE"
*.db_unique_name = ${STANDBY_UNIQUE_NAME}
*.audit_file_dest = ${audit_file_dest}
*.log_archive_dest_1 = ${log_archive_dest_1}
*.control_files = ${control_files}
*.LOG_FILE_NAME_CONVERT = ${log_file_name_convert}
*.DB_FILE_NAME_CONVERT = ${db_file_name_convert}
*.db_create_file_dest= ${control_files}
*.db_recovery_file_dest= ${db_recovery_file_dest}
*.db_recovery_file_dest_size= ${db_recovery_file_dest_size} 
*.LOG_ARCHIVE_CONFIG= ${log_archive_config}
*.LOCAL_LISTENER= ${local_listener}
EOF

  # Replace the original file
  mv "$TMP_FILE" "$PFILE"
  chown {{ db_oracle_user }}:{{ db_oinstall_group }} "$PFILE"
  chmod 755 "$PFILE"

  # Verify changes
  echo "Updated standby.pfile:"
  cat "$PFILE"

elif [[ "$WITH_BACKUP" == "false" ]]; then

# Insert a static entry for standby in the listener.ora file if not updated before
    if ! grep -q "${STANDBY_UNIQUE_NAME}" "$listener_file"; then
        cp "$listener_file" "${listener_file}.bak"
        echo "Updating listener.ora..."
        cat <<EOF >> "$listener_file"


SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
     (GLOBAL_DBNAME = ${STANDBY_UNIQUE_NAME})
     (ORACLE_HOME = ${ORACLE_HOME})
     (SID_NAME = ${ORACLE_SID})
    )
   )

EOF
    fi
 
    $ORACLE_HOME/bin/lsnrctl reload
    # Create an initialization parameter with only DB_NAME
  echo "DB_NAME=${PRIMARY_DB_NAME}" > "$PFILE"
  chown {{ db_oracle_user }}:{{ db_oinstall_group }} "$PFILE"
  chmod 755 "$PFILE"

else
    echo "ERROR: Invalid value for 'with_backup'. Please provide 'true' or 'false'." | tee -a "$FAILURE_LOG"
    exit 1
fi

#  Check for failures and exit accordingly
if [[ -s "$FAILURE_LOG" ]]; then
    cat "$FAILURE_LOG"
    rm -f "$FAILURE_LOG"
    exit 1
fi

echo "Standby PFILE,PWD file copied, and TNS entries updated."
echo "All pre-config performed for standby database successfully!"
rm -f "$FAILURE_LOG"
touch "{{ done_dir }}/standby_preconfig.success"
exit 0