---
# Copyright (c) IBM Corporation 2021
# tasks file for standby_config

- name: Run initialization tasks
  ansible.builtin.include_tasks: ../../dataguard_precheck/tasks/init.yml
  when: not init_done is defined

- name: Checking if Dataguard setup was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/dataguard.success"
  register: dataguarddone
  when: inventory_hostname == primary_host

- name: Exit if Dataguard setup was already done
  ansible.builtin.fail:
    msg: "Dataguard setup already done. Exiting."
  when:
    - dataguarddone.stat.exists
    - inventory_hostname == primary_host
  run_once: true

- name: End play if Dataguard setup Task was done
  ansible.builtin.meta: end_play
  when: dataguarddone.stat.exists
  run_once: true

- name: Checking if Standby configuration was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/standby_config.success"
  register: standbyconfigdone
  when: inventory_hostname == standby_host

- name: Standby configuration block
  when:
    - inventory_hostname == standby_host
    - standbyconfigdone is defined and not standbyconfigdone.stat.exists
  block:
    - name: Create necessary directories for standby configuration
      ansible.builtin.file:
        path: "{{ databases.standby.oracle_db_base }}/admin/{{ databases.standby.db_unique_name }}/{{ item }}"
        state: directory
        owner: "{{ db_oracle_user }}"
        group: "{{ db_oinstall_group }}"
        mode: '0755'
      loop:
        - adump
        - dpump

    - name: Copy necessary files for standby configuration
      ansible.builtin.copy:
        src: "{{ scripts_dir }}/{{ item.src }}"
        dest: "{{ databases.standby.oracle_db_home }}/{{ item.dest }}"
        owner: "{{ db_oracle_user }}"
        group: "{{ db_oinstall_group }}"
        remote_src: true
        mode: "{{ item.mode }}"
      loop:
        - { src: "orapw{{ databases.standby.db_sid }}", dest: "dbs", mode: "0640" }
        - { src: "tnsnames.ora", dest: "network/admin", mode: "0640" }
        - { src: "standby.pfile", dest: "dbs", mode: "0644" }

    - name: Copy Dataguard config script for standby
      ansible.builtin.template:
        src: standby_config.sh.j2
        dest: "{{ scripts_dir }}/standby_config.sh"
        mode: '0755'
      vars:
        database_name: "standby"
        primary_diskgroup: "{{ standby_diskgroup }}"

    - name: Execute Dataguard config script on standby
      ansible.builtin.command: "{{ scripts_dir }}/standby_config.sh"
      register: precheck_output
      failed_when: precheck_output.rc != 0
      changed_when: false

    - name: Debug config Output for standby database
      ansible.builtin.debug:
        msg: "{{ precheck_output.stdout_lines }}"

- name: Check connectivity and validate from standby to primary
  when: inventory_hostname == standby_host
  block:
    - name: Check connectivity to primary database from standby site
      ansible.builtin.shell: |
        export ORACLE_HOME={{ databases.primary.oracle_db_home }}
        export PATH={{ databases.primary.oracle_db_home }}/bin:$PATH
        export TNS_ADMIN={{ databases.primary.oracle_db_home }}/network/admin
        tnsping {{ databases.primary.db_unique_name }}
      register: tnsping_primaryresult
      changed_when: false
      failed_when: false

    - name: Validate primary database connectivity from standby site
      ansible.builtin.fail:
        msg: "Error: Remote primary database cannot be reached using TNS alias. Check listener status and tnsnames configuration."
      when: tnsping_primaryresult is not defined or 'OK' not in tnsping_primaryresult.stdout

    - name: Confirm successful TNS connections from standby site
      ansible.builtin.debug:
        msg: "All good for TNS connections from standby!"
      when: tnsping_primaryresult is defined and 'OK' in tnsping_primaryresult.stdout

- name: Check connectivity and validate from primary to standby
  when: inventory_hostname == primary_host
  block:
    - name: Check connectivity to standby database from primary site
      ansible.builtin.shell: |
        export ORACLE_HOME={{ databases.standby.oracle_db_home }}
        export PATH={{ databases.standby.oracle_db_home }}/bin:$PATH
        export TNS_ADMIN={{ databases.standby.oracle_db_home }}/network/admin
        tnsping {{ databases.standby.db_unique_name }}
      register: tnsping_standbyresult
      changed_when: false
      failed_when: false

    - name: Validate standby database connectivity from primary site
      ansible.builtin.fail:
        msg: "Error: Standby database cannot be reached using TNS alias. Check listener status and tnsnames configuration."
      when: tnsping_standbyresult is not defined or 'OK' not in tnsping_standbyresult.stdout

    - name: Confirm successful TNS connections from primary site
      ansible.builtin.debug:
        msg: "All good for TNS connections from primary!"
      when: tnsping_standbyresult is defined and 'OK' in tnsping_standbyresult.stdout
