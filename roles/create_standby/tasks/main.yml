---
# Copyright (c) IBM Corporation 2021
# tasks file for oracle_install
- name: Run initialization tasks
  ansible.builtin.include_tasks: ../../dataguard_precheck/tasks/init.yml
  when: not init_done is defined

- name: Checking if Dataguard setup was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/dataguard.success"
  register: dataguarddone
  delegate_to: "{{ standby_host }}"
  run_once: true

- name: Set fact if Dataguard setup was done
  ansible.builtin.set_fact:
    dataguard_setup_done: "{{ dataguarddone.stat.exists | default(false) }}"
  run_once: true

- name: Exit if Dataguard setup was already done
  ansible.builtin.fail:
    msg: "Dataguard setup already done. Exiting."
  when: dataguard_setup_done
  run_once: true

- name: End play if Dataguard setup Task was done
  ansible.builtin.meta: end_play
  when: dataguard_setup_done
  run_once: true

- name: Checking if Dataguard restore was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/standby_restore.success"
  register: restoredone
  when: inventory_hostname == standby_host

- name: Copy DBID from primary database
  ansible.builtin.template:
    src: primary_dbid.sh
    dest: "{{ scripts_dir }}/primary_dbid.sh"
    mode: '0755'
  when: 
      - inventory_hostname == primary_host 
      - restoredone.stat.exists is not defined or not restoredone.stat.exists

- name: Fetch DBID from primary database
  ansible.builtin.shell: "{{ scripts_dir }}/primary_dbid.sh"
  register: dbid_result
  changed_when: false
  when: 
      - inventory_hostname == primary_host 
      - restoredone.stat.exists is not defined or not restoredone.stat.exists 

- name: Set DBID as fact on primary database
  ansible.builtin.set_fact:
    standby_dbid: "{{ dbid_result.stdout | trim }}"
  when: 
      - inventory_hostname == primary_host 
      - restoredone.stat.exists is not defined or not restoredone.stat.exists

- name: Fetch logical CPU count from primary (AIX)
  ansible.builtin.shell: "lsdev -Cc processor | wc -l"
  register: cpu_core_result
  changed_when: false
  when: 
      - inventory_hostname == primary_host
      - restoredone.stat.exists is not defined or not restoredone.stat.exists

- name: Set CPU core count as fact on primary
  ansible.builtin.set_fact:
    primary_cpu_core: "{{ cpu_core_result.stdout | trim }}"
  when: 
      - inventory_hostname == primary_host
      - cpu_core_result.stdout | trim | length > 0
      - restoredone.stat.exists is not defined or not restoredone.stat.exists

- name: Fetch facts from primary to standby
  ansible.builtin.set_fact:
    standby_dbid: "{{ hostvars[primary_host].standby_dbid }}"
    primary_cpu_core: "{{ hostvars[primary_host].primary_cpu_core }}"
  when: 
      - inventory_hostname == standby_host
      - hostvars[primary_host].standby_dbid is defined and hostvars[primary_host].standby_dbid | length > 0
      - hostvars[primary_host].primary_cpu_core is defined and hostvars[primary_host].primary_cpu_core | length > 0
      - not restoredone.stat.exists

- name: Copy RMAN restore script for standby
  ansible.builtin.template:
    src: restore_standby_db.sh.j2
    dest: "{{ scripts_dir }}/restore_standby_db.sh"
    mode: '0755'
  vars:
    database_name: "standby"
    dbid: "{{ standby_dbid }}"
    primary_cpu_core: "{{ primary_cpu_core }}"
  when: 
      - inventory_hostname == standby_host 
      - not restoredone.stat.exists

- name: Execute restore script for standby
  ansible.builtin.shell: "{{ scripts_dir }}/restore_standby_db.sh"
  register: precheck_output
  failed_when: precheck_output.rc != 0
  changed_when: false
  when: 
      - inventory_hostname == standby_host 
      - not restoredone.stat.exists

- name: Debug restore Output for standby database
  ansible.builtin.debug:
    msg: "{{ precheck_output.stdout_lines }}"
  when: 
      - inventory_hostname == standby_host 
      - not restoredone.stat.exists

- name: Checking if Dataguard restore was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/standby_restore.success"
  register: restoredone
  when: inventory_hostname == standby_host

- name: Checking if Dataguard post restore was already done
  ansible.builtin.stat:
    path: "{{ done_dir }}/post_restore.success"
  register: postrestoredone
  when: inventory_hostname == standby_host

- name: Copy RMAN Restore Post-Processing Script
  ansible.builtin.template:
    src: restore_postprocess.sh
    dest: "{{ scripts_dir }}/restore_postprocess.sh"
    mode: '0755'
  when:
       - inventory_hostname == standby_host 
       - restoredone.stat.exists
       - not postrestoredone.stat.exists

- name: Run RMAN Restore Post-Processing Script
  ansible.builtin.shell: "{{ scripts_dir }}/restore_postprocess.sh"
  register: script_output
  changed_when: false
  when:
       - inventory_hostname == standby_host 
       - restoredone.stat.exists
       - not postrestoredone.stat.exists

- name: Display RMAN Restore Post-Processing Script Output
  ansible.builtin.debug:
    msg: "{{ script_output.stdout_lines }}"
  when:
       - inventory_hostname == standby_host 
       - restoredone.stat.exists
       - not postrestoredone.stat.exists









