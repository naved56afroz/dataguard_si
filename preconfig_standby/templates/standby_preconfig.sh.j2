#!/bin/bash

export ORACLE_SID=$(ps -ef | grep pmon | grep ASM | awk '{match($NF, /\+ASM[0-9]*/); print substr($NF, RSTART, RLENGTH)}')
export ORACLE_HOME=$(awk -F: -v sid="$ORACLE_SID" '$1 == sid {print $2}' /etc/oratab)
export PATH=$PATH:$ORACLE_HOME/bin
PORT=$(su - grid -c "$ORACLE_HOME/bin/lsnrctl status | grep PORT | awk -F'PORT=' '{print \$2}' | awk -F')' '{print \$1}' | sort -u | head -1")




MASTER_LOG="{{ done_dir }}/standby_preconfig.log"
FAILURE_LOG="{{ done_dir }}/standby_preconfig_failure.log"

# Ensure log files are empty before running
> "$MASTER_LOG"
> "$FAILURE_LOG"

# Fetch the disk group name from standby ASM
su - {{ grid_user }} -c "sqlplus -s / as sysdba" <<SQL | tee "$MASTER_LOG"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 1000
SET TRIMOUT ON
SET TRIMSPOOL ON

-- Fetch ASM disk group
SELECT 'DISKGROUP:' || NAME FROM v\$asm_diskgroup WHERE STATE='MOUNTED';

SQL

DISKGROUP=$(grep "DISKGROUP:" "$MASTER_LOG" | awk -F ':' '{print $2}')

# Check if disk group was retrieved
if [[ -z "$DISKGROUP" ]]; then
  echo "ERROR:Failed to fetch disk group from standby ASM, verify manually and retry" | tee -a "$FAILURE_LOG"
  exit 1
fi

# Take a backup before modifying
cp {{ databases.standby.oracle_db_home }}/dbs/standby.pfile {{ databases.standby.oracle_db_home }}/dbs/init{{ databases.standby.oracle_db_sid }}.ora
PFILE={{ databases.standby.oracle_db_home }}/dbs/init{{ databases.standby.oracle_db_sid }}.ora
TMP_FILE="${PFILE}.tmp"

# Define values dynamically
oracle_db_unique_name="{{ databases.standby.oracle_db_unique_name }}"
oracle_db_base="{{ databases.standby.oracle_db_base }}"
standby_diskgroup="+${DISKGROUP}"
primary_diskgroup={{ primary_diskgroup }}
PRIMARY_UNIQUE_NAME="{{ databases.primary.oracle_db_unique_name }}"
STANDBY_UNIQUE_NAME="{{ databases.standby.oracle_db_unique_name }}"
db_recovery_file_dest="{{ databases.standby.db_recovery_file_dest }}"
db_recovery_file_dest_size="{{ databases.standby.db_recovery_file_dest_size }}"

log_archive_dest_1="'LOCATION=USE_DB_RECOVERY_FILE_DEST'"
log_archive_config="'DG_CONFIG=(${STANDBY_UNIQUE_NAME},${PRIMARY_UNIQUE_NAME})'"
control_files="'${standby_diskgroup}'"
log_file_name_convert="'${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'"
db_file_name_convert="'${primary_diskgroup}/${PRIMARY_UNIQUE_NAME}','${standby_diskgroup}/${STANDBY_UNIQUE_NAME}'"
audit_file_dest="'${oracle_db_base}/admin/${oracle_db_unique_name}/adump'"
local_listener="'(ADDRESS=(PROTOCOL=TCP)(HOST={{ standby_host }})(PORT=${PORT}))'"

# Remove all matching parameters in one go and create a temp file
awk 'tolower($0) !~ /(db_unique_name|audit_file_dest|log_archive_dest_1|control_files|log_file_name_convert|db_file_name_convert|db_create_file_dest)/' "$PFILE" > "$TMP_FILE"

# Append updated parameters at the end
cat <<EOF >> "$TMP_FILE"
*.db_unique_name = ${oracle_db_unique_name}
*.audit_file_dest = ${audit_file_dest}
*.log_archive_dest_1 = ${log_archive_dest_1}
*.control_files = ${control_files}
*.LOG_FILE_NAME_CONVERT = ${log_file_name_convert}
*.DB_FILE_NAME_CONVERT = ${db_file_name_convert}
*.db_create_file_dest= ${control_files}
*.db_recovery_file_dest= ${db_recovery_file_dest}
*.db_recovery_file_dest_size= ${db_recovery_file_dest_size} 
*.LOG_ARCHIVE_CONFIG= ${log_archive_config}
*.LOCAL_LISTENER= ${local_listener}
EOF

# Replace the original file
mv "$TMP_FILE" "$PFILE"
chown {{ db_oracle_user }}:{{ db_oinstall_group }} {{ databases.standby.oracle_db_home }}/dbs/init{{ databases.standby.oracle_db_sid }}.ora
chmod 755 {{ databases.standby.oracle_db_home }}/dbs/init{{ databases.standby.oracle_db_sid }}.ora

# Verify changes
echo "Updated standby.pfile:"
cat {{ databases.standby.oracle_db_home }}/dbs/init{{ databases.standby.oracle_db_sid }}.ora

#  Check for failures and exit accordingly
if [[ -s "$FAILURE_LOG" ]]; then
    cat "$FAILURE_LOG"
    rm -f "$FAILURE_LOG"
    exit 1
fi

echo "Standby PFILE,PWD file copied, and TNS entries updated."
echo "All pre-config performed for standby database successfully!"
rm -f "$FAILURE_LOG"
touch "{{ done_dir }}/standby_preconfig.success"
exit 0